// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordReturnUserId = `-- name: CreatePasswordReturnUserId :one
insert into passwords (
    user_id,
    password,
    create_date
)
values (
    $1,
    $2,
    now()
)
returning user_id
`

type CreatePasswordReturnUserIdParams struct {
	UserID   pgtype.Int4
	Password string
}

func (q *Queries) CreatePasswordReturnUserId(ctx context.Context, arg CreatePasswordReturnUserIdParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, createPasswordReturnUserId, arg.UserID, arg.Password)
	var user_id pgtype.Int4
	err := row.Scan(&user_id)
	return user_id, err
}

const createUserReturnId = `-- name: CreateUserReturnId :one
insert into users (
    username,
    name,
    email,
    dob,
    gender,
    create_date
)
values (
    $1,
    $2,
    $3,
    $4,
    $5,
    now()
)
returning id
`

type CreateUserReturnIdParams struct {
	Username string
	Name     string
	Email    string
	Dob      string
	Gender   string
}

func (q *Queries) CreateUserReturnId(ctx context.Context, arg CreateUserReturnIdParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUserReturnId,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.Dob,
		arg.Gender,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
select 
    id, 
    username, 
    name, 
    email, 
    dob, 
    gender
from 
    users
where 
    username = $1
`

type GetUserRow struct {
	ID       int32
	Username string
	Name     string
	Email    string
	Dob      string
	Gender   string
}

func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Dob,
		&i.Gender,
	)
	return i, err
}
